{
    "v-text": {
        "prefix": "vText",
        "body": [
            "v-text=\"${1:msg}\""
        ],
        "description": "Expects: string"
    },
    "v-html": {
        "prefix": "vHtml",
        "body": [
            "v-html=\"${1:html}\""
        ],
        "description": "Expects: string"
    },
    "v-if": {
        "prefix": "vIf",
        "body": [
            "v-if=\"${1:condition}\""
        ],
        "description": "Expects: any"
    },
    "v-show": {
        "prefix": "vShow",
        "body": [
            "v-show=\"${1:condition}\""
        ],
        "description": "Expects: any"
    },
    "v-else": {
        "prefix": "vElse",
        "body": [
            "v-else"
        ],
        "description": "Does not expect expression. previous sibling element must have v-if or v-else-if."
    },
    "v-else-if": {
        "prefix": "vElseIf",
        "body": [
            "v-else-if=\"${1:condition}\""
        ],
        "description": "Expects: any. previous sibling element must have v-if or v-else-if."
    },
    "v-for": {
        "prefix": "vFor",
        "body": [
            "v-for=\"${1:item} in ${2:items}\""
        ],
        "description": "Expects: Array | Object | number | string"
    },
    "v-on": {
        "prefix": "vOn",
        "body": [
            "v-on:${1:event}=\"${2:handle}\""
        ],
        "description": "Expects: Function | Inline Statement"
    },
    "v-bind": {
        "prefix": "vBind",
        "body": [
            "v-bind$1=\"${2}\""
        ],
        "description": "Expects: any (with argument) | Object (without argument)"
    },
    "v-model": {
        "prefix": "vModel",
        "body": [
            "v-model=\"${1:something}\""
        ],
        "description": "Expects: varies based on value of form inputs element or output of components"
    },
    "v-pre": {
        "prefix": "vPre",
        "body": [
            "v-pre"
        ],
        "description": "Does not expect expression"
    },
    "v-cloak": {
        "prefix": "vCloak",
        "body": [
            "v-cloak"
        ],
        "description": "Does not expect expression"
    },
    "v-once": {
        "prefix": "vOnce",
        "body": [
            "v-once"
        ],
        "description": "Does not expect expression"
    },

    "key": {
        "prefix": "key",
        "body": [
            ":key=\"${1:key}\""
        ],
        "description":"Expects: string. The key special attribute is primarily used as a hint for Vue’s virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed. Children of the same common parent must have unique keys. Duplicate keys will cause render errors."
    },
    "ref": {
        "prefix": "ref",
        "body": [
            "ref=\"${1:reference}\"$0"
        ],
        "description": "Expects: string. ref is used to register a reference to an element or a child component. The reference will be registered under the parent component’s $refs object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance."
    },
    "slotA": {
        "prefix": "slotA",
        "body": [
            "slot=\"$1\"$0"
        ],
        "description": "slot=''. Expects: string. Used on content inserted into child components to indicate which named slot the content belongs to."
    },
    "slotE": {
        "prefix": "slotE",
        "body": [
            "slot"
        ],
        "description": "<slot></slot>. Expects: string. Used on content inserted into child components to indicate which named slot the content belongs to."
    },

    "component": {
        "prefix": "component",
        "body": [
            "component(:is=\"${1:componentId}\") $0"

        ],
        "description": "component element"
    },
    "keep-alive": {
        "prefix": "keepAlive",
        "body": [
            "keep-alive$0"
        ],
        "description": "keep-alive element"
    },
    "transition": {
        "prefix": "transition",
        "body": [
            "transition$0"
        ],
        "description": "transition element"
    },
    "transition-group": {
        "prefix": "transitionGroup",
        "body": [
            "transition-group$0"
        ],
        "description": "transition-group element"
    },

    "routerLink": {
        "prefix": "routerLink",
        "body": [
            "router-link $0"
        ],
        "description": "router-link element"
    },
    "routerLinkTo": {
        "prefix": "routerLinkTo",
        "body": [
            "router-link (to=\"$1\") $0"
        ],
        "description": "router-link (to='') . router-link element"
    },
    "to": {
        "prefix": "to",
        "body": [
            "to=\"$1\"$0"
        ],
        "description": "to=''"
    },
    "tag": {
        "prefix": "tag",
        "body": [
            "tag=\"$1\"$0"
        ],
        "description": "tag=''"
    },
    "routerView": {
        "prefix": "routerView",
        "body": [
            "router-view $0"
        ],
        "description": "router-view element"
    }
}